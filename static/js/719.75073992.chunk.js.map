{"version":3,"file":"static/js/719.75073992.chunk.js","mappings":"4OAEaA,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAClBC,EACND,EADMC,MAAOC,EACbF,EADaE,aAAcC,EAC3BH,EAD2BG,SAAUC,EACrCJ,EADqCI,OAAQC,EAC7CL,EAD6CK,YAAaC,EAC1DN,EAD0DM,aAOtDC,EAAOC,KAAKC,MAAqB,GAAfH,GAGxB,OACE,iCACE,0BACG,IACAL,EAFH,KARW,IAAIS,KAAKR,GACVS,cAOV,IAE4B,QAE5B,4BACE,gBACEC,IACEP,EAAW,yCAC2BA,GAClC,iFAENQ,MAAO,IACPC,OAAQ,IACRC,QAAQ,OACRC,IAAI,YAEN,4BACE,wCAAgBT,EAAhB,QACA,sCACA,uBAAIJ,KACJ,oCACA,uBAzBiBC,EAAOa,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,gBA8B/D,ECOD,EA3CqB,WAAO,IAAD,IACnBC,GAAWC,EAAAA,EAAAA,MACXC,GAAsBC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,SAC3D,GAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAO3B,EAAP,KAAkB4B,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOI,EAAP,KAAkBC,EAAlB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,IACbE,EAAAA,EAAAA,IAAgBL,GACbM,MAAK,SAAAC,GACJR,EAAaQ,EACd,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,QAAQT,GAAa,GACzB,GAAE,CAACH,KAGF,iCACE,SAAC,KAAD,CAAMa,GAAInB,EAAoBoB,QAA9B,2JAECZ,IAAa,yCAEb/B,IAAa,SAACD,EAAD,CAAWC,UAAWA,KAEpC,mDACA,2BACE,yBACE,SAAC,KAAD,CAAM0C,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,EAAAE,SAAD,CAAUC,UAAU,wCAApB,UACE,SAAC,KAAD,QAIP,C,+LC5CDC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAGHC,EAAW,mCAAG,oGACFF,EAAAA,EAAAA,IAAA,UAHR,qBAGQ,oBAAiCC,IAD/B,cACnBX,EADmB,yBAElBA,EAASa,MAFS,2CAAH,qDAKXC,EAAY,mCAAG,WAAMC,GAAN,uFACHL,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCI,EADnC,gCADG,cACpBf,EADoB,yBAInBA,EAASa,MAJU,2CAAH,sDAOZf,EAAe,mCAAG,WAAMkB,GAAN,uFACNN,EAAAA,EAAAA,IAAA,gBACZM,EADY,oBACEL,EADF,oBADM,cACvBX,EADuB,yBAItBA,EAASa,MAJa,2CAAH,sDAOfI,EAAe,mCAAG,WAAMD,GAAN,uFACNN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACUL,EADV,oBADM,cACvBX,EADuB,yBAItBA,EAASa,MAJa,2CAAH,sDAOfK,EAAU,mCAAG,WAAMF,GAAN,uFACDN,EAAAA,EAAAA,IAAA,gBACZM,EADY,4BACUL,EADV,2BADC,cAClBX,EADkB,yBAIjBA,EAASa,MAJQ,2CAAH,qD","sources":["components/MovieCard.js","pages/MovieDetails.js","services/api.js"],"sourcesContent":["import propTypes from 'prop-types';\n\nexport const MovieCard = ({ movieInfo }) => {\n  const { title, release_date, overview, genres, poster_path, vote_average } =\n    movieInfo;\n\n  const releaseYear = () => {\n    const date = new Date(release_date);\n    return date.getFullYear();\n  };\n  const rate = Math.round(vote_average * 10);\n  const genresList = () => genres.map(genre => genre.name).join(', ');\n\n  return (\n    <>\n      <h1>\n        {' '}\n        {title} ({releaseYear()}){' '}\n      </h1>\n      <div>\n        <img\n          src={\n            poster_path\n              ? `https://image.tmdb.org/t/p/w300${poster_path}`\n              : 'https://img.freepik.com/free-vector/images-concept-illustration_114360-218.jpg'\n          }\n          width={300}\n          height={400}\n          loading=\"lazy\"\n          alt=\"poster\"\n        />\n        <div>\n          <p>User score: {rate}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genresList()}</p>\n        </div>\n      </div>\n    </>\n  );\n};\n\nMovieCard.propTypes = {\n  movieInfo: propTypes.shape({\n    title: propTypes.string.isRequired,\n    release_date: propTypes.string.isRequired,\n    overview: propTypes.string,\n    genres: propTypes.arrayOf(propTypes.object),\n    poster_path: propTypes.string,\n    vote_average: propTypes.number.isRequired,\n  }),\n};\n","import { Suspense, useRef, useEffect, useState } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport { getMovieDetails } from 'services/api';\nimport { MovieCard } from 'components/MovieCard';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n  const backLinkLocationRef = useRef(location.state?.from ?? '/Home');\n  const [movieInfo, setMovieInfo] = useState(null);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getMovieDetails(movieId)\n      .then(response => {\n        setMovieInfo(response);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n      .finally(setIsLoading(false));\n  }, [movieId]);\n\n  return (\n    <>\n      <Link to={backLinkLocationRef.current}>Назад к странице коллекции</Link>\n\n      {isLoading && <div>LOADING ...</div>}\n\n      {movieInfo && <MovieCard movieInfo={movieInfo} />}\n\n      <p>Additional information</p>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Suspense fallback={<div>LOADING...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '0133cbd46d7aed15aba1a7c05914842d';\nconst TRENDING = 'trending/movie/day';\n\nexport const getTrending = async () => {\n  const response = await axios.get(`${TRENDING}?api_key=${API_KEY}`);\n  return response.data;\n};\n\nexport const searchMovies = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data;\n};\n\nexport const getMovieDetails = async id => {\n  const response = await axios.get(\n    `movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getMovieCredits = async id => {\n  const response = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const getReviews = async id => {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data;\n};\n"],"names":["MovieCard","movieInfo","title","release_date","overview","genres","poster_path","vote_average","rate","Math","round","Date","getFullYear","src","width","height","loading","alt","map","genre","name","join","location","useLocation","backLinkLocationRef","useRef","state","from","useState","setMovieInfo","movieId","useParams","isLoading","setIsLoading","useEffect","getMovieDetails","then","response","catch","error","console","log","finally","to","current","Suspense","fallback","axios","API_KEY","getTrending","data","searchMovies","query","id","getMovieCredits","getReviews"],"sourceRoot":""}